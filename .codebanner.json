{
    "folders": [
        "test",
        "scrutiny"
    ],
    "include_patterns": [
        "*.py"
    ],
    "exclude_patterns": [
        "*__init__.py",
        "scrutiny/sdk/docs/*"
    ],
    "license": "MIT - See LICENSE file",
    "project": "Scrutiny Debugger",
    "repo": "github.com/scrutinydebugger/scrutiny-python",
    "copyright_owner": "Scrutiny Debugger",
    "copyright_start_date": "2021",
    "copyright_end_date": null,
    "files": {
        "scrutiny/__main__.py": {
            "docstring": "Entry point of the python module. Launch the CLI.",
            "add_shebang": true
        },
        "scrutiny/cli/cli.py": {
            "docstring": "Provide the Command Line Interface.\nAllow to launch specific functionality by invoking Scrutiny with command line arguments."
        },
        "scrutiny/cli/commands/base_command.py": {
            "docstring": "Abstract class for all commands. Used to automatically find all available commands through reflection"
        },
        "scrutiny/cli/commands/elf2varmap.py": {
            "docstring": "CLI Command to read and .elf file and generate a Scrutiny VarMap file that will be included into the Firmware Description File."
        },
        "scrutiny/cli/commands/get_firmware_id.py": {
            "docstring": "CLI Command to generate a unique ID from a .elf file and optionally writes that ID to the file by a search and replace approach so that the device can broadcast its ID once flashed by this firmware."
        },
        "scrutiny/cli/commands/install_sfd.py": {
            "docstring": "CLI Command to copy a Scrutiny Firmware Description file into the scrutiny storage so it can be automatically loaded by the server upon connection with a device"
        },
        "scrutiny/cli/commands/launch_server.py": {
            "docstring": "CLI Command to launch the scrutiny server"
        },
        "scrutiny/cli/commands/make_sfd.py": {
            "docstring": "CLI Command to build and validate a Scrutiny Firmware Description file"
        },
        "scrutiny/cli/commands/make_metadata.py": {
            "docstring": "CLI Command to generate the metadata file that will be included in a Scrutiny Firmware Description file"
        },
        "scrutiny/cli/commands/runtest.py": {
            "docstring": "CLI Command to launch the python unit tests"
        },
        "scrutiny/cli/commands/uninstall_sfd.py": {
            "docstring": "CLI Command to remove a Scrutiny Firmware Description file from the scrutiny storage"
        },
        "scrutiny/core/firmware_id.py": {
            "docstring": "Holds the default firmware ID. Used for detection of untagged firmware"
        },
        "scrutiny/core/datalogging.py": {
            "docstring": "Contains the definitions related to the datalogger that are globals to all modules. Mainly what can be stored to the storage"
        },
        "scrutiny/core/firmware_description.py": {
            "docstring": "Contains the class that represent a Scrutiny Firmware Description file. \nA .sfd is a file that holds all the data related to a firmware and is identified by a unique ID."
        },
        "scrutiny/core/sfd_storage.py": {
            "docstring": "Manipulate the Scrutiny storage for .sfd files"
        },
        "scrutiny/core/variable.py": {
            "docstring": "Variable class represent a variable, will be included in VarMap"
        },
        "scrutiny/core/varmap.py": {
            "docstring": "A VarMap list all variables in a firmware file along with their types, address, bit offset, etc\n. I is a simplified version of the DWARF debugging symbols."
        },
        "scrutiny/core/bintools/demangler.py": {
            "docstring": "Converts mangled linkage names to readable symbols names"
        },
        "scrutiny/core/bintools/elf_dwarf_var_extractor.py": {
            "docstring": "Reads a .elf file, extract the DWARF debugging symbols and make a VarMap object out of it."
        },
        "scrutiny/core/bintools/get_var_memrange.py": {
            "docstring": "Simple tool to get the memory ranges of the .elf sections that contains the variables. \nUsed to generate Memdumps for unit testing"
        },
        "scrutiny/server/server.py": {
            "docstring": "The scrutiny server. Talk with multiple clients through a websocket API and communicate with a device through a given communication link (Serial, UDP, etc)\n Allow the clients to interact with the device"
        },
        "scrutiny/server/api/API.py": {
            "docstring": "Manages the websocket API to talk with the multiple clients. Can be a GUI client or a CLI client"
        },
        "scrutiny/server/api/dummy_client_handler.py": {
            "docstring": "Stubbed API connector to make API requests in unit tests without relying on websockets"
        },
        "scrutiny/server/api/value_streamer.py": {
            "docstring": "Take the data from the Datastore and sends it to all clients by respecting bitrate limits and avoiding duplicate date."
        },
        "scrutiny/server/api/websocket_client_handler.py": {
            "docstring": "Manage the API websocket connections .\n This class has a list of all clients and identify them by a unique ID"
        },
        "scrutiny/server/datastore/datastore.py": {
            "docstring": "This class is a container that will hold all the data read from a device (e.g. the variables).\n It's the meeting point of the API (with ValueStreamer) and the DeviceHandler"
        },
        "scrutiny/server/datastore/datastore_entry.py": {
            "docstring": "A variable entry in the datastore"
        },
        "scrutiny/server/device/device_handler.py": {
            "docstring": "Manage the communication with the device at high level.\n Try to establish a connection, once it succeed, reads the device configuration. \n Will keep the communication ongoing and will request for memory dump based on the Datastore state"
        },
        "scrutiny/server/device/device_info.py": {
            "docstring": "All the information that can be extracted from the device through the Scrutiny protocol"
        },
        "scrutiny/server/device/emulated_device.py": {
            "docstring": "Emulate a device that is compiled with the C++ lib.\nFor unit testing purpose"
        },
        "scrutiny/server/device/request_dispatcher.py": {
            "docstring": "Use a PriorityQueue to dispatch Request to the device. Associate each request with its callback"
        },
        "scrutiny/server/device/links/dummy_link.py": {
            "docstring": "Fake communication link with a device. Used by the EmulatedDevice for unit test purpose"
        },
        "scrutiny/server/device/links/udp_link.py": {
            "docstring": "Connects the CommHandler to a device through UDP"
        },
        "scrutiny/server/device/submodules/device_searcher.py": {
            "docstring": "Once enabled, generates DISCOVER requests to find a device at the other end of the communication link."
        },
        "scrutiny/server/device/submodules/heartbeat_generator.py": {
            "docstring": "Once enabled, generate HEARTBEAT request periodically to keep a connection alive with a device."
        },
        "scrutiny/server/device/submodules/info_poller.py": {
            "docstring": "Once enabled, successively poll all pollable data from a device through the Scrutiny protocol. Also call callbacks method when specific data is read e.g. Protocol version, buffer size, etc"
        },
        "scrutiny/server/device/submodules/session_initializer.py": {
            "docstring": "Once enabled, try to establish a working session with a device."
        },
        "scrutiny/server/protocol/comm_handler.py": {
            "docstring": "The CommHandler task is to convert Requests and Response from or to a stream of bytes.\nThis class manage send requests, wait for response, indicates if a response timeout occurred and decodes bytes. \nIt manages the low level part of the communication protocol with the device"
        },
        "scrutiny/server/protocol/crc32.py": {
            "docstring": "Compute a CRC32 for protocol validation"
        },
        "scrutiny/server/protocol/exceptions.py": {
            "docstring": "Some exceptions specific to the protocol"
        },
        "scrutiny/server/protocol/protocol.py": {
            "docstring": "Allow encoding and decoding of data based on the Scrutiny Protocol"
        },
        "scrutiny/server/protocol/request.py": {
            "docstring": "Represent a request sent by the server and received by the device"
        },
        "scrutiny/server/protocol/response.py": {
            "docstring": "Represent a response sent by the device and received by the server"
        },
        "scrutiny/server/protocol/commands/base_command.py": {
            "docstring": "Abstract class for all Scrutiny protocol commands "
        },
        "scrutiny/server/protocol/commands/comm_control.py": {
            "docstring": "Scrutiny protocol command to manipulate the communication"
        },
        "scrutiny/server/protocol/commands/datalog_control.py": {
            "docstring": "Scrutiny protocol command to trigger and read data logs."
        },
        "scrutiny/server/protocol/commands/dummy_command.py": {
            "docstring": "Fake Scrutiny protocol command for unit test purpose"
        },
        "scrutiny/server/protocol/commands/get_info.py": {
            "docstring": "Scrutiny protocol command to read some specific configuration in the device"
        },
        "scrutiny/server/protocol/commands/memory_control.py": {
            "docstring": "Scrutiny protocol command to read and wrie memory"
        },
        "scrutiny/server/protocol/commands/user_command.py": {
            "docstring": "Scrutiny protocol command to launch user defined functions in the device. \n It's a way of leveraging the existing communication protocol for other purpose than Scrutiny debugging."
        },
        "test/cli/test_cli.py": {
            "docstring": "Test the Command Line Interface"
        },
        "test/cli/test_elf_dwarf_var_extractor.py": {
            "docstring": "Test the extraction of dwarf symbols from a .elf file"
        },
        "test/cli/test_makevarmap_Linux_LE_x64_Gcc_8_3_0.py": {
            "docstring": "Test that we can make a valid VarMap out of a known binary."
        },
        "test/server/test_api.py": {
            "docstring": "Test the client API through a fake handler"
        },
        "test/server/test_datastore.py": {
            "docstring": "Test the Datastore behavior"
        },
        "test/server/test_device_handler.py": {
            "docstring": "Test the DeviceHandler that manage the communication with the device at high level."
        },
        "test/server/test_dummy_connection.py": {
            "docstring": "Test the FakeConnection used for unit tests"
        },
        "test/server/test_value_streamer.py": {
            "docstring": "Test the ValueStreamer object that reads the datastore and broadcast variables to all clients."
        },
        "test/server/protocol/test_comm_handler.py": {
            "docstring": "Test the CommHandler that manage the communication with the device a lower level.\n Converts bytes to Request/Response and flag timeouts"
        },
        "test/server/protocol/test_crc.py": {
            "docstring": "Make sure the CRC32 is working for the protocol"
        },
        "test/server/protocol/test_protocol_v1_0.py": {
            "docstring": "Test the Scrutiny Protocol.\n Validate encoding and decoding of each command."
        },
        "test/server/protocol/test_request_response.py": {
            "docstring": "Test for the protocol Request and Response class.\n Ensure that byte encoding/decoding works properly"
        },
        "test/server/test_request_dispatcher.py": {
            "docstring": "Test the request dispatcher.\nPriorities, throttling, size limits."
        },
        "test/tools/test_tools.py": {
            "docstring": "Test various tools for the Python server application"
        },
        "scrutiny/core/memory_content.py": {
            "docstring": "Provide a tool to manipulate non contiguous chunks of bytes with their addresses.\nRepresent a partial memory snapshot"
        },
        "test/core/test_memory_content.py": {
            "docstring": "Test the MemoryContent class functionalities. Make sure it correctly writes and read and also agglomerate contiguous clusters"
        },
        "scrutiny/core/typehints.py": {
            "docstring": "Contains some definition for type hints that are used across all project"
        },
        "scrutiny/server/api/abstract_client_handler.py": {
            "docstring": "Base class for all API client handlers"
        },
        "scrutiny/server/device/links/abstract_link.py": {
            "docstring": "Base class for all device communication link (serial, udp, other)"
        },
        "scrutiny/server/device/submodules/memory_reader.py": {
            "docstring": "Synchronize the datastore with the device\nPoll for entries that are watched and update the datastore with data read from the device. "
        },
        "test/server/test_memory_reader.py": {
            "docstring": "Make sure the memory_Reader correctly reads the device memory to fills the datastore entries that are watch"
        },
        "scrutiny/server/device/submodules/memory_writer.py": {
            "docstring": "Synchronize the datastore with the device\nPoll for entries that are watched and update the device with value change request coming from the user in the datastore."
        },
        "test/core/test_variables.py": {
            "docstring": "Test the behavior of variable manipulation tools"
        },
        "test/server/test_memory_writer.py": {
            "docstring": "Test the bridge between the data store and the device memory (datastore to memory direction only)"
        },
        "scrutiny/cli/commands/list_sfd.py": {
            "docstring": "Print a list of all installed Scrutiny Firmware Description files (SFD) installed on this system"
        },
        "scrutiny/server/active_sfd_handler.py": {
            "docstring": "Manage the loaded SFD file with which the client will interact."
        },
        "test/server/test_active_sfd_handler.py": {
            "docstring": "Test the ActiveSFDHandler"
        },
        "scrutiny/exceptions.py": {
            "docstring": "Some exceptions specific to this module"
        },
        "test/server/links/test_dummy_link.py": {
            "docstring": "Make sure that dummy links transfer data and that global channels works (to simulate switching of channels)"
        },
        "test/server/links/test_serial_link.py": {
            "docstring": "Test serial port link. Require an external serial loopback.\nMake the link object talk with a serial port."
        },
        "test/server/links/test_udp_link.py": {
            "docstring": "Test UDP link.\nnMake the link object talk with a socket"
        },
        "scrutiny/server/device/links/serial_link.py": {
            "docstring": "Represent a Serial Link that can be used to communicate with a device"
        },
        "scrutiny/server/device/links/rtt_link.py": {
            "docstring": "Represent a Segger J-Link RTT that can be used to communicate with a device"
        },
        "test/core/test_types.py": {
            "docstring": "Make some checks on Scrutiny basic types used project wide"
        },
        "scrutiny/core/codecs.py": {
            "docstring": "Contains classes capable to encode/decode data exchanged with embedded side"
        },
        "scrutiny/core/basic_types.py": {
            "docstring": "Contains the basic types used project-wides"
        },
        "scrutiny/server/protocol/typing.py": {
            "docstring": "Mypy typing information for the Scrutiny protocol"
        },
        "scrutiny/server/api/typing.py": {
            "docstring": "Mypy typing information for API"
        },
        "test/core/test_sfd.py": {
            "docstring": "Run some test on the Firmware Description class meant to identify a firmware"
        },
        "scrutiny/cli/commands/add_alias.py": {
            "docstring": "Defines the add-alias command used to embed an alias file into an SFD file in the making"
        },
        "test/core/test_alias.py": {
            "docstring": "Test Alias basic features"
        },
        "scrutiny/core/alias.py": {
            "docstring": "Class that contains the definition of an alias."
        },
        "scrutiny/server/datastore/entry_type.py": {
            "docstring": "Type of datastore entry."
        },
        "test/core/test_firmware_parser.py": {
            "docstring": "Test basic capacities to parse a firmware a generate a valid firmware ID"
        },
        "scrutiny/cli/commands/tag_firmware_id.py": {
            "docstring": "Command to write the firmware ID into a freshly compiled binary"
        },
        "scrutiny/core/firmware_parser.py": {
            "docstring": "Reads a compiled firmware and provide tools to read or write the firmware ID"
        },
        "test/integration/test_read_write.py": {
            "docstring": "Does some Read and Write through the API and check the memory of the emulated device"
        },
        "test/integration/integration_test.py": {
            "docstring": "Base class for tests that checks the integration of all the pythons components. They talk to the API and control an emulated device that runs in a thread"
        },
        "test/server/test_emulated_device.py": {
            "docstring": "Some testcases to make sure the emulated device runs correctly"
        },
        "test/server/datalogging/test_datalogging_storage.py": {
            "docstring": "Test the datalogging storage"
        },
        "test/server/datalogging/test_datalogging.py": {
            "docstring": "Test datalogging features"
        },
        "scrutiny/server/datalogging/datalogging_manager.py": {
            "docstring": "The main server components that manages the datalogging feature at high level"
        },
        "scrutiny/server/datalogging/datalogging_storage.py": {
            "docstring": "A storage interface to save and fetch datalogging acquisition from the disk to keep an history of them"
        },
        "scrutiny/server/device/submodules/datalogging_poller.py": {
            "docstring": "Component of the Device Handler that handles the datalogging feature within the device. Poll for status, new data and configure the device"
        },
        "test/integration/test_datalogging_integration.py": {
            "docstring": "Test the whole datalogging chain with a request to the API, a server that process the request and a fake device that will do the logging."
        },
        "test/server/datalogging/test_datalogging_manager.py": {
            "docstring": "Test the datalogging manager features"
        },
        "scrutiny/server/datalogging/datalogging_utilities.py": {
            "docstring": "Contains some utilities that may be used by more than one module"
        },
        "scrutiny/server/datalogging/definitions/device.py": {
            "docstring": "Contains the definitions related to the datalogging feature on the device side. Shared between the DataloggingManager and the DeviceHandler"
        },
        "scrutiny/server/datalogging/definitions/api.py": {
            "docstring": "Contains the definitions related to the datalogging feature on the API side. Shared between the API and the DataloggingManager"
        },
        "scrutiny/cli/commands/datalog_info.py": {
            "docstring": "Command that return some information about datalogging such as storage location, size, number of acquisitions"
        },
        "scrutiny/cli/commands/list_datalog.py": {
            "docstring": "List all the datalogging acquisition stored on this server"
        },
        "scrutiny/cli/commands/delete_datalog.py": {
            "docstring": "Delete a single or all datalogging acquisitions"
        },
        "scrutiny/cli/commands/export_datalog.py": {
            "docstring": "Extract a datalogging acquisition and export it into a common format, such as CSV"
        },
        "test/sdk/test_api_parser.py": {
            "docstring": "Test suite for the parsing function used by the client"
        },
        "test/sdk/test_client.py": {
            "docstring": "Test suite for the SDK client"
        },
        "scrutiny/tools/timer.py": {
            "docstring": "Minimalist class to make measurement of time easier."
        },
        "scrutiny/tools/throttler.py": {
            "docstring": "Allow to do some throttling to reduce the transmission speed"
        },
        "scrutiny/tools/synchronous_websocket_server.py": {
            "docstring": "Synchronous wrapper around the asynchronous websockets module"
        },
        "scrutiny/sdk/exceptions.py": {
            "docstring": "Definitions of all exceptions used across the Scrutiny SDK"
        },
        "scrutiny/sdk/watchable_handle.py": {
            "docstring": "A handle on a watchable element (Variable, Alias, RPV). This handle is created by the client when watching"
        },
        "scrutiny/sdk/definitions.py": {
            "docstring": "Global definitions of types, constants, enums used across the Scrutiny SDK"
        },
        "scrutiny/sdk/client.py": {
            "docstring": "A client that can talk with the Scrutiny server"
        },
        "scrutiny/sdk/_api_parser.py": {
            "docstring": "Internal parsing function for the Scrutiny server API messages"
        },
        "scrutiny/sdk/write_request.py": {
            "docstring": "A object representing a request to write a watchable element."
        },
        "test/integration/test_interract_with_device.py": {
            "docstring": "Make sure we can do some API calls related to the device that are not read/writes."
        },
        "test/core/test_datalogging.py": {
            "docstring": "Test the datalogging features from the core module (shared across modules)"
        },
        "test/sdk/test_datalogging.py": {
            "docstring": "Test the datalogging features defines in the SDK"
        },
        "scrutiny/sdk/datalogging.py": {
            "docstring": "Defines all the types used for datalogging in the SDK"
        },
        "scrutiny/core/validation.py": {
            "docstring": "Helper function for argument validation"
        },
        "scrutiny/core/bintools/elftools_stubs.py": {
            "docstring": "Stubfile for pyelftools"
        },
        "test/sdk/test_listeners.py": {
            "docstring": "Test suite for the SDK listener feature"
        },
        "scrutiny/sdk/listeners/buffered_reader_listener.py": {
            "docstring": "Create a listener that simply enqueue the updates in a queue for the user to read them"
        },
        "scrutiny/sdk/listeners/text_stream_listener.py": {
            "docstring": "Simple listener useful for debug. Prints all updates in a text stream"
        },
        "scrutiny/sdk/listeners/csv_file_listener.py": {
            "docstring": "Listener that dumps the values of the watchables into either one or multiple CSV files"
        }
    }
}
